name: Tornado Bunny CI/CD

# Controls when the action will run. Triggers the workflow on push for any branch
on: push
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    runs-on: ${{ matrix.os }}
    # The type of runner that the job will run on
    strategy:
      matrix:
        os: ["ubuntu-18.04", "ubuntu-20.04"]
        python-version: [3.7, 3.8, 3.9]
    # Set up rabbitmq service
    services:
      rabbitmq:
        image: rabbitmq
        ports:
          - 5672:5672
        options: >-
          --health-cmd "rabbitmqctl authenticate_user guest guest"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          pip install setuptools wheel twine
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        env:
          RABBITMQ_USER: "guest"
          RABBITMQ_PASSWORD: "guest"
          RABBITMQ_HOST: "localhost"
          RABBITMQ_PORT: ${{ job.services.rabbitmq.ports['5672'] }}
          RABBITMQ_VIRTUAL_HOST: "/"
        run: |
          pip install .
          pytest tests/ --doctest-modules --cov=tornado_bunny

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
            python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine pytest-cov
      - name: Update Version
        run: |
          VERSION=$(git describe --abbrev=0 --tags)
          VERSION_BITS=(${VERSION//./ })
          MINOR=${VERSION_BITS[2]}
          NEW_MINOR=$((MINOR+1))
          NEW_TAG="${VERSION_BITS[0]}.${VERSION_BITS[1]}.$NEW_MINOR"
          echo "Updating $VERSION to $NEW_TAG"
          git tag $NEW_TAG
          git push --tags
      - name: Create coverage report
        run: |
          coverage run --source tornado_bunny -m pytest
          coverage report -m
          coverage xml
      - name: Upload coverage to Codecov
        if: github.ref == 'refs/heads/master'
        uses: codecov/codecov-action@v2
        env:
            OS: "ubuntu-latest"
            PYTHON: "3.9"
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage/reports/
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: true
      - name: Build and Publish Python Package
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*
